package facegallery;

import facegallery.utils.CloudVisionFaceDetector;
import pt.runtime.TaskIDGroup;
import facegallery.utils.ByteArray;

            return false;
import java.util.List;
import java.util.ArrayList;
import java.util.concurrent.atomic.AtomicBoolean;
import java.lang.System;

public class FaceDetector {    
    private static boolean detect(ByteArray byteArray) {
    	try {
            return CloudVisionFaceDetector.imageHasFace(byteArray);
        } catch (Exception e) {
            System.err.println(e.getLocalizedMessage());
            return false;
        }
    }
    
    IO_TASK private static void detectWorker(ByteArray byteArray, AtomicBoolean hasFace) {
    	try {
            hasFace.set(CloudVisionFaceDetector.imageHasFace(byteArray));
        } catch (Exception e) {
            System.err.println(e.getLocalizedMessage());
            hasFace.set(false);
        }
    }

    public static List<Boolean> detectSequential(List<ByteArray> fileBytes) {
    	List<Boolean> detections = new ArrayList<Boolean>();
        for (int i = 0; i < fileBytes.size(); i++) {
        	detections.add(detect(fileBytes.get(i)));
        }
        return detections;
    }
    
    public static List<AtomicBoolean> createParallelDetectionContainer(int fileBytesSize) {
    	List<AtomicBoolean> detections = new ArrayList(fileBytesSize);
    	for (int i = 0; i < fileBytesSize; i++) {
    		detections.add(new AtomicBoolean(true));
    	}
    	return detections;
    }
    
    TASK public static void detectParallel(List<ByteArray> fileBytes, List<AtomicBoolean> detections) {
    	TaskIDGroup<Void> detectionTasks = new TaskIDGroup(fileBytes.size());
    	for (int i = 0; i < fileBytes.size(); i++) {
    		detectionTasks.add(detectWorker(fileBytes.get(i), detections.get(i)));
    	}

    	try {
    		detectionTasks.waitTillFinished();
		} catch (ExecutionException e) {
			e.printStackTrace();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
    }
}
