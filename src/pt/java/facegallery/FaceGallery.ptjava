package facegallery;

import facegallery.utils.CloudVisionFaceDetector;
import facegallery.utils.ByteArray;
import facegallery.utils.CloudVision;
import pt.runtime.TaskID;

import java.util.List;
import java.util.ArrayList;
import java.util.concurrent.atomic.AtomicBoolean;
import java.lang.System;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

public class FaceGallery {
	public static void main(String[] args) {

	    File file = new File("/home/chris/Desktop/A1_SE751_G27/src/Dataset");

        //SEQUENTIAL FILE IO
        System.out.println("Seq file read started");
        long millis = System.currentTimeMillis();
	    FileReader.getImagesFilesSequential(file);
	    System.out.println("time taken file read seq: " + (System.currentTimeMillis() - millis));

        //SEQUENTIAL FACE DETECTION
        System.out.println("Seq detect started");
	    millis = System.currentTimeMillis();
        List<Boolean> sequentialDetections = FaceDetector.detectSequential(FileReader.getImagesFilesSequential(file));
        System.out.println("time taken detect seq: " + (System.currentTimeMillis() - millis));

        for (int i = 0; i < file.listFiles().length; i++) {
            System.out.println(i + " seq res: " + sequentialDetections.get(i));
        }


        //PARALLEL PART START HERE

        List<AtomicBoolean> parallelDetections = FaceDetector.createParallelDetectionContainer(file.listFiles().length);
        List<ByteArray> byteParallel = new ArrayList<ByteArray>(file.listFiles().length);

        //PARALLEL FILE IO
        System.out.println("Parallel file read started");
        millis = System.currentTimeMillis();
        TaskID id = FileReader.getImagesFilesParallel(byteParallel, file) asyncCatch(RuntimeException myHandler(TaskID));
        try {
            id.waitTillFinished();
            System.out.println("time taken file read parallel: " + (System.currentTimeMillis() - millis));
        } catch (ExecutionException e) {
            e.printStackTrace();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        System.out.println("Parallel detect started");

        millis = System.currentTimeMillis();

        //PARALLEL FILE DETECTION
        TaskID id1 = FaceDetector.detectParallel(byteParallel, parallelDetections);

    	try {
    		id1.waitTillFinished();
            System.out.println("time taken file detectparallel: " + (System.currentTimeMillis() - millis));
            for (int i = 0; i < file.listFiles().length; i++) {
                System.out.println(i + " parallel res: " + parallelDetections.get(i));
            }
		} catch (ExecutionException e) {
			e.printStackTrace();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}

    public static void myHandler(TaskID id) {
        //System.out.println(“Task ” + id.getID() + “ threw an exception:”);
        id.getException().printStackTrace();
    }

}
